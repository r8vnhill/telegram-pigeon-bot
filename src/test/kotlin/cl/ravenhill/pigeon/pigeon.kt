package cl.ravenhill.pigeon

import cl.ravenhill.pigeon.bot.Bot
import cl.ravenhill.pigeon.chat.PigeonUser
import cl.ravenhill.pigeon.chat.ReadUser
import com.github.kotlintelegrambot.entities.ReplyMarkup
import io.kotest.property.Arb
import io.kotest.property.arbitrary.arbitrary
import io.kotest.property.arbitrary.bool
import io.kotest.property.arbitrary.boolean
import io.kotest.property.arbitrary.constant
import io.kotest.property.arbitrary.flatMap
import io.kotest.property.arbitrary.long
import io.kotest.property.arbs.usernames

/**
 * Generates an arbitrary `Bot` object for use in property-based testing. This function provides a way to create
 * `Bot` instances with predictable behavior based on a supplied success condition. Each generated `Bot` will either
 * always succeed or fail in sending messages depending on the Boolean value generated by the `success` arb.
 *
 * @param success
 *  An `Arb<Boolean>` that determines whether the generated `Bot` should always succeed or fail in sending messages.
 *  True results in a `Bot` that always succeeds, while False results in a `Bot` that always fails.
 * @return
 *  An `Arb<Bot>` capable of generating `Bot` instances with deterministic message sending behavior based on the
 *  provided `success` arb.
 */
fun arbBot(success: Arb<Boolean> = Arb.boolean()): Arb<Bot> = success.flatMap {
    Arb.constant<Bot>(
        object : Bot {
            override fun sendMessage(user: ReadUser, message: String, replyMarkup: ReplyMarkup?) = if (it) {
                BotSuccess("Message sent to ${user.username}: $message")
            } else {
                BotFailure("Failed to send message to ${user.username}")
            }
        }
    )
}

/**
 * Generates an arbitrary `PigeonUser` object using property-based testing libraries. This function is typically
 * used in tests where user entities with randomized attributes are required to ensure the robustness
 * and reliability of the system under test.
 */
fun arbUser() = arbitrary {
    PigeonUser(username = Arb.usernames().bind().value, userId = Arb.long().bind())
}